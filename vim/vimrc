syntax on
set encoding=utf-8

set nobackup
set nowritebackup
set noswapfile

set number
set relativenumber

set shiftwidth=4
set tabstop=4
set softtabstop=4

set expandtab
set smartindent
set breakindent

set ignorecase
set smartcase
set nohlsearch

set signcolumn=yes
set scrolloff=8
set nowrap
set mouse=a

set timeoutlen=500
set updatetime=750

set undodir=~/.cache/vim/undo
set undofile

let mapleader = " "
let maplocalleader = " "

nnoremap <leader>e :Ex<cr>

"""""""""""""
" rose-pine "
"""""""""""""
let g:disable_bg = 1
let g:disable_float_bg = 1

set background=dark
colorscheme rosepine

"""""""""""
" fzf.vim "
"""""""""""
nnoremap <leader>fp :GFiles<cr>
nnoremap <leader>fa :Files<cr>
nnoremap <leader>fg :Rg<cr>

""""""""""""""""
" vim-fugitive "
""""""""""""""""
noremap <leader>gg :Git<cr>

""""""""""""
" coc.nvim "
""""""""""""
inoremap <silent><expr> <c-n>
            \ coc#pum#visible() ? coc#pum#next(1) :
            \ CheckBackspace() ? "\<Tab>" :
            \ coc#refresh()
inoremap <expr><c-p> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <c-y> coc#pum#visible() ? coc#pum#confirm()
            \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

inoremap <expr> <C-c> pumvisible() ? "\<C-e>\<C-c>" : "\<C-c>"

function! CheckBackspace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion
if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
else
    inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent><nowait> [d <Plug>(coc-diagnostic-prev)
nmap <silent><nowait> ]d <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent><nowait> gd <Plug>(coc-definition)
nmap <silent><nowait> gy <Plug>(coc-type-definition)
nmap <silent><nowait> gi <Plug>(coc-implementation)
nmap <silent><nowait> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
    if CocAction('hasProvider', 'hover')
        call CocActionAsync('doHover')
    else
        call feedkeys('K', 'in')
    endif
endfunction

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)

" Code action at current cursor position
nmap <leader>ca  <Plug>(coc-codeaction-cursor)
